version: '3.8'

services:

  api-gateway:
    container_name: api-gateway
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      # This is the main external entry point for clients
      - "8080:8080"
    environment:
      # Infrastructure URIs
      CONFIG_SERVER_URI: http://config-server:8888
      EUREKA_URI: http://eureka-server:8761/eureka/
      ZIPKIN_URI: http://zipkin:9411/
      # Optional: Define Auth Server location if needed directly by gateway filters later
      # AUTH_SERVER_ISSUER_URI: http://auth-service:9000
    depends_on:
      - config-server
      - eureka-server
      # Add depends_on for backend services IF you want to ensure they
      # are *started* before the gateway. Doesn't guarantee readiness.
      # - patient-service
      # - doctor-service
      # - appointment-service
      # - medical-records-service
      # - billing-service
      # - auth-service
    networks:
      - healthcare-network

  # healthcare-system/docker-compose.yml
  # ... (services: postgres-db, ..., medical-records-service) ...

  # --- Auth Service ---
  auth-service:
    container_name: auth-service
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    ports:
      - "9000:9000"
    environment:
      # Database connection
      DB_HOST: postgres-db
      DB_PORT: 5432
      DB_NAME: authdb # Use the specific DB name
      DB_USER: user
      DB_PASSWORD: password
      # Infrastructure URIs
      CONFIG_SERVER_URI: http://config-server:8888
      EUREKA_URI: http://eureka-server:8761/eureka/
      ZIPKIN_URI: http://zipkin:9411/
    depends_on:
      - postgres-db
      - config-server
      - eureka-server
    networks:
      - healthcare-network

  # ... (volumes, networks definitions) ...



  billing-service:
    container_name: billing-service
    build:
      context: ./billing-service
      dockerfile: Dockerfile
    ports:
      - "8086:8086"
    environment:
      # Database connection
      DB_HOST: postgres-db # Use SERVICE name
      DB_PORT: 5432
      DB_NAME: billingdb # Use the specific DB name
      DB_USER: user
      DB_PASSWORD: password
      # Infrastructure URIs
      CONFIG_SERVER_URI: http://config-server:8888
      EUREKA_URI: http://eureka-server:8761/eureka/
      ZIPKIN_URI: http://zipkin:9411/
    depends_on:
      - postgres-db
      - config-server
      - eureka-server
      # Optional: depends_on appointment-service if triggered directly
    networks:
      - healthcare-network


  medical-records-service:
    container_name: medical-records-service
    build:
      context: ./medical-records-service
      dockerfile: Dockerfile
    ports:
      - "8085:8085"
    environment:
      # MongoDB connection details (read by medical-records-service.yml)
      MONGO_HOST: mongodb # Use service name
      MONGO_PORT: 27017
      MONGO_DB: medicalrecordsdb # Database name
      MONGO_USER: root # Use root user created above (or dedicated user)
      MONGO_PASSWORD: rootpassword # Use password set above
      # Infrastructure URIs
      CONFIG_SERVER_URI: http://config-server:8888
      EUREKA_URI: http://eureka-server:8761/eureka/
      ZIPKIN_URI: http://zipkin:9411/
    depends_on:
      - mongodb # Add dependency
      - config-server
      - eureka-server
    networks:
      - healthcare-network



  # healthcare-system/docker-compose.yml
  # ... (version, services: postgres-db, rabbitmq, zipkin, config-server, eureka-server, patient-service, doctor-service, appointment-service) ...

  # --- Notification Service ---
  notification-service:
    container_name: notification-service
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    # ports: # No port mapping needed if no web server running
    environment:
      # Infrastructure URIs
      CONFIG_SERVER_URI: http://config-server:8888
      EUREKA_URI: http://eureka-server:8761/eureka/
      ZIPKIN_URI: http://zipkin:9411/
      # RabbitMQ connection details
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: guest
      RABBITMQ_PASS: guest
      # Any Email/SMS creds would go here (use secrets management in prod!)
    depends_on:
      - config-server
      - eureka-server # Depends if registering
      - rabbitmq      # MUST depend on RabbitMQ
    networks:
      - healthcare-network

  # ... (volumes, networks definitions) ...

  # healthcare-system/docker-compose.yml
  # ... (version, services: postgres-db, rabbitmq, zipkin, config-server, eureka-server, patient-service, doctor-service) ...

  # --- Appointment Service ---
  appointment-service:
    container_name: appointment-service
    build:
      context: ./appointment-service
      dockerfile: Dockerfile
    ports:
      - "8083:8083" # Map host 8083 to container 8083
    environment:
      # Database connection
      DB_HOST: postgres-db
      DB_PORT: 5432
      DB_NAME: appointmentdb # Use the specific DB name
      DB_USER: user
      DB_PASSWORD: password
      # Infrastructure URIs
      CONFIG_SERVER_URI: http://config-server:8888
      EUREKA_URI: http://eureka-server:8761/eureka/
      ZIPKIN_URI: http://zipkin:9411/
      # RabbitMQ connection details
      RABBITMQ_HOST: rabbitmq # Use service name
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: guest
      RABBITMQ_PASS: guest
    depends_on:
      - postgres-db
      - config-server
      - eureka-server
      - rabbitmq # Add dependency on RabbitMQ
      - patient-service # Depends on these logically, ensures startup order
      - doctor-service
    networks:
      - healthcare-network

  # ... (volumes, networks definitions) ...
  doctor-service:
    container_name: doctor-service
    build:
      context: ./doctor-service # Context relative to docker-compose.yml
      dockerfile: Dockerfile
    ports:
      - "8082:8082" # Map host 8082 to container 8082
    environment:
      # Use the SAME database instance, but a DIFFERENT database name
      DB_HOST: postgres-db # Service name of the DB container
      DB_PORT: 5432
      DB_NAME: doctordb # Use the specific DB name for doctors
      DB_USER: user
      DB_PASSWORD: password
      CONFIG_SERVER_URI: http://config-server:8888
      EUREKA_URI: http://eureka-server:8761/eureka/
      ZIPKIN_URI: http://zipkin:9411/
    depends_on:
      - postgres-db # Corrected service name
      - config-server
      - eureka-server
    networks:
      - healthcare-network

  patient-service:
    container_name: patient-service
    build:
      context: ./patient-service # Context relative to docker-compose.yml
      dockerfile: Dockerfile
    ports:
      - "8081:8081" # Map host 8081 to container 8081 (defined in patient-service.yml)
    environment:
      # Database connection details (read by patient-service.yml)
      DB_HOST: postgres-db # Use the container name of the DB service
      DB_PORT: 5432 # Default postgres port
      DB_NAME: patientdb # Specific database for this service
      DB_USER: user
      DB_PASSWORD: password
      # Config Server URI (read by bootstrap.yml) - Use service name
      CONFIG_SERVER_URI: http://config-server:8888
      # Eureka URI (read by application.yml/patient-service.yml) - Use service name
      EUREKA_URI: http://eureka-server:8761/eureka/
      # Zipkin URI (read by application.yml) - Use service name
      ZIPKIN_URI: http://zipkin:9411/
    depends_on: # Ensure dependencies are started (basic check, not full readiness)
      - postgres-db
      - config-server
      - eureka-server
    networks:
      - healthcare-network


  config-server:
    container_name: config-server
    build:
      context: ./config-server
      dockerfile: Dockerfile
    ports:
      - "8888:8888"
    volumes:
      - ./config-repo:/config-repo
    environment:
      SPRING_PROFILES_ACTIVE: git
    networks:
      - healthcare-network
    # --- ADD HEALTHCHECK ---
    healthcheck:
      # Use curl (needs to be installed in the image if not present) to check the health actuator
      test: [ "CMD", "curl", "-f", "http://localhost:8888/actuator/health" ]
      interval: 15s       # Check health every 15 seconds
      timeout: 5s        # Wait up to 5 seconds for a response
      retries: 5         # Attempt check 5 times before marking as unhealthy
      start_period: 20s  # Allow 20 seconds grace period for startup before first check

  eureka-server:
    container_name: eureka-server
    build:
      context: ./eureka-server
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    environment:
      CONFIG_SERVER_HOST: config-server
      # Keep these overrides
      EUREKA_CLIENT_REGISTER_WITH_EUREKA: "false"
      EUREKA_CLIENT_FETCH_REGISTRY: "false"
      # --- Force the service URL for the internal client ---
      # Use the correct internal hostname resolvable via Docker Compose DNS
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eureka-server:8761/eureka/
    networks:
      - healthcare-network
    depends_on:
      - config-server
  # --- Database ---
  postgres-db:
    image: postgres:15 # Use a specific recent version
    container_name: healthcare_postgres_instance
    environment:
      POSTGRES_DB: servicedb_default # A default DB, services will use specific ones
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password # CHANGE THIS in a real scenario
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - healthcare-network

  # --- Message Broker ---
  rabbitmq:
    image: rabbitmq:3.11-management # Use version with management UI
    container_name: rabbitmq
    ports:
      - "5672:5672"  # AMQP port
      - "15672:15672" # Management UI port
    environment:
      RABBITMQ_DEFAULT_USER: guest # CHANGE THIS for production
      RABBITMQ_DEFAULT_PASS: guest # CHANGE THIS for production
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/
    networks:
      - healthcare-network

  # --- Tracing Backend ---
  zipkin:
    image: openzipkin/zipkin:latest
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - healthcare-network

  # --- MongoDB (Optional - if needed by Medical Records Service later) ---
  # mongodb:
  #   image: mongo:6
  #   container_name: mongodb
  #   ports:
  #     - "27017:27017"
  #   volumes:
  #     - mongo_data:/data/db
  #   networks:
  #     - healthcare-network

  # --- Monitoring (Optional - Add later if needed) ---
  # prometheus:
  #   ...
  # grafana:
  #   ...
  mongodb:
    image: mongo:6 # Use specific version
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root # For initial setup/auth
      MONGO_INITDB_ROOT_PASSWORD: rootpassword # CHANGE THIS!
      # Optional: Create a specific user/db on init - more complex setup needed
      # MONGO_INITDB_DATABASE: admin # Auth usually happens against admin db
    volumes:
      - mongo_data:/data/db # Persist data
      # Optional: Mount init scripts if needed: - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - healthcare-network

# --- Volumes Definition ---
volumes:
  postgres_data:
  rabbitmq_data:
  mongo_data:
  # mongo_data:

# --- Network Definition ---
networks:
  healthcare-network:
    driver: bridge # Default Docker network driver





