# healthcare-system/config-repo/patient-service.yml
server:
  port: 8081 # Assign a port (or use 0 for dynamic)

spring:
  datasource:
    # Use environment variables provided by docker-compose, default to localhost for local runs
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:patientdb}
    username: ${DB_USER:user}
    password: ${DB_PASSWORD:password} # Use secure way in production!
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: update # Creates/updates schema based on entities (use 'validate' or 'none' with Flyway/Liquibase in prod)
    show-sql: true # Log generated SQL
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true # Pretty print SQL

# Eureka client config can often be inherited from config-repo/application.yml
# Only add specific overrides here if needed, e.g.:
# eureka:
#   instance:
#     instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}

  security:
    oauth2:
      resourceserver:
        jwt:
          # Point to the Auth Service JWK Set endpoint using internal Docker service name
          jwk-set-uri: ${AUTH_SERVER_JWKS_URI:http://auth-service:9000/oauth2/jwks}
          # Optional: Specify required issuer if needed (must match 'iss' claim in JWT)
          # issuer-uri: ${AUTH_SERVER_ISSUER_URI:http://auth-service:9000}
          # Optional: Specify required audience if needed (must match 'aud' claim in JWT)
          # audiences: patient-service-api # Example audience

# Logging level specific to this service
logging:
  level:
    com.healthcare.patientservice: DEBUG # More detailed logging for our code
    org.hibernate.SQL: DEBUG           # Log SQL statements
    # org.hibernate.type.descriptor.sql: TRACE # Log SQL parameters (very verbose)