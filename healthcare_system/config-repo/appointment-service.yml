# healthcare-system/config-repo/appointment-service.yml
server:
  port: 8083 # Different port

spring:
  # Database Config
  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:appointmentdb} # Separate DB
    username: ${DB_USER:user}
    password: ${DB_PASSWORD:password}
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true

  # RabbitMQ Config
  rabbitmq:
    host: ${RABBITMQ_HOST:rabbitmq} # Use service name in Docker
    port: ${RABBITMQ_PORT:5672}
    username: ${RABBITMQ_USER:guest}
    password: ${RABBITMQ_PASS:guest}
    template:
      exchange: ${healthcare.amqp.exchange.appointments:healthcare.appointments.exchange} # Default exchange for template

# Eureka client config inherited from application.yml

# Optional: Fine-tune Feign client behavior (timeouts etc.)
# feign:
#   client:
#     config:
#       # Default config for all clients
#       default:
#         connectTimeout: 5000  # 5 seconds
#         readTimeout: 10000 # 10 seconds
#       # Specific config for a client (use Feign client name)
#       # patient-service:
#       #   readTimeout: 5000
#   circuitbreaker:
#     enabled: true # Enable Resilience4j integration

# Optional: Fine-tune Resilience4j behavior
# resilience4j:
#   circuitbreaker:
#     instances:
#       patientServiceCB: # Matches @CircuitBreaker name
#         # failureRateThreshold, slidingWindowSize, etc.
#       doctorServiceCB:
#         # ...
#   retry:
#      instances:
#        # Define retry configs if using @Retry

logging:
  level:
    com.healthcare.appointmentservice: DEBUG
    org.hibernate.SQL: DEBUG
    # Log Feign calls (if needed for debugging)
    # com.healthcare.appointmentservice.client: DEBUG

# Custom properties
healthcare:
  amqp:
    exchange:
      appointments: healthcare.appointments.exchange # Define the exchange name